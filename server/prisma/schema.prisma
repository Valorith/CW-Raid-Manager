generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  displayName        String
  googleId           String?            @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  nickname           String?
  admin              Boolean?           @default(false)
  createdAttendances AttendanceEvent[]  @relation("AttendanceCreator")
  createdLootListEntries GuildLootListEntry[] @relation("LootListCreator")
  characters         Character[]
  createdGuilds      Guild[]            @relation("GuildCreator")
  guildApplications  GuildApplication[]
  guildMemberships   GuildMembership[]
  createdRaids       RaidEvent[]        @relation("RaidCreator")
  createdLootEvents  RaidLootEvent[]    @relation("LootCreator")
  createdRaidSeries  RaidEventSeries[] @relation("RaidSeriesCreator")
  raidSignups        RaidSignup[]
}

model Guild {
  id                   String                   @id @default(cuid())
  name                 String                   @unique
  slug                 String                   @unique
  description          String?
  createdById          String
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  defaultRaidStartTime String?                  @db.VarChar(5)
  defaultRaidEndTime   String?                  @db.VarChar(5)
  defaultDiscordVoiceUrl String?               @db.VarChar(512)
  discordWidgetServerId String?                @db.VarChar(64)
  discordWidgetTheme   DiscordWidgetTheme?     @default(DARK)
  discordWidgetEnabled Boolean                 @default(false)
  characters           Character[]
  createdBy            User                     @relation("GuildCreator", fields: [createdById], references: [id])
  applications         GuildApplication[]
  discordWebhooks      GuildDiscordWebhook[]
  lootParserSettings   GuildLootParserSettings?
  lootLists            GuildLootListEntry[]
  members              GuildMembership[]
  raids                RaidEvent[]
  lootEvents           RaidLootEvent[]
  raidSeries           RaidEventSeries[]

  @@index([createdById], map: "Guild_createdById_fkey")
}

model GuildDiscordWebhook {
  id                   String   @id @default(cuid())
  guildId              String
  webhookUrl           String?  @db.VarChar(512)
  isEnabled            Boolean  @default(false)
  usernameOverride     String?  @db.VarChar(120)
  avatarUrl            String?  @db.VarChar(512)
  mentionRoleId        String?  @db.VarChar(120)
  eventSubscriptions   Json     @default(dbgenerated("(json_object())"))
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
  label                String   @default("Primary Webhook") @db.VarChar(120)
  mentionSubscriptions Json     @default(dbgenerated("(json_object())"))
  guild                Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
}

model GuildMembership {
  id        String    @id @default(cuid())
  guildId   String
  userId    String
  role      GuildRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  guild     Guild     @relation(fields: [guildId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([guildId, userId])
  @@index([userId], map: "GuildMembership_userId_fkey")
}

model GuildApplication {
  id        String                 @id @default(cuid())
  guildId   String
  userId    String
  status    GuildApplicationStatus @default(PENDING)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  guild     Guild                  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
  @@index([userId], map: "GuildApplication_userId_fkey")
}

model Character {
  id                String              @id @default(cuid())
  name              String              @unique
  level             Int
  class             CharacterClass
  archetype         CharacterArchetype?
  userId            String
  guildId           String?
  isMain            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  attendanceRecords AttendanceRecord[]
  raidSignups       RaidSignup[]
  guild             Guild?              @relation(fields: [guildId], references: [id])
  user              User                @relation(fields: [userId], references: [id])

  @@index([guildId], map: "Characters_guildId_fkey")
  @@index([userId], map: "Characters_userId_fkey")
  @@map("Characters")
}

model RaidEvent {
  id           String            @id @default(cuid())
  guildId      String
  createdById  String
  name         String
  startTime    DateTime
  targetZones  Json
  targetBosses Json
  notes        String?
  discordVoiceUrl String?        @db.VarChar(512)
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  endedAt      DateTime?
  startedAt    DateTime?
  recurrenceSeriesId String?
  attendance   AttendanceEvent[]
  createdBy    User              @relation("RaidCreator", fields: [createdById], references: [id])
  guild        Guild             @relation(fields: [guildId], references: [id])
  signups      RaidSignup[]
  loot         RaidLootEvent[]
  recurrenceSeries   RaidEventSeries? @relation(fields: [recurrenceSeriesId], references: [id], onDelete: SetNull)

  @@index([createdById], map: "RaidEvent_createdById_fkey")
  @@index([guildId], map: "RaidEvent_guildId_fkey")
  @@index([recurrenceSeriesId])
}

model RaidEventSeries {
  id        String                  @id @default(cuid())
  guildId   String
  createdById String
  frequency RaidRecurrenceFrequency
  interval  Int                     @default(1)
  endDate   DateTime?
  isActive  Boolean                 @default(true)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  events    RaidEvent[]
  guild     Guild                   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  createdBy User                    @relation("RaidSeriesCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([createdById])
}

model GuildLootParserSettings {
  id        String   @id @default(cuid())
  guildId   String   @unique
  patterns  Json     @default(dbgenerated("(json_array())"))
  emoji     String?  @db.VarChar(16)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model RaidLootEvent {
  id          String    @id @default(cuid())
  raidId      String
  guildId     String
  itemName    String
  looterName  String
  looterClass String?   @db.VarChar(50)
  eventTime   DateTime?
  emoji       String?   @db.VarChar(16)
  note        String?   @db.VarChar(500)
  createdById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  createdBy   User?     @relation("LootCreator", fields: [createdById], references: [id])
  guild       Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  raid        RaidEvent @relation(fields: [raidId], references: [id], onDelete: Cascade)

  @@index([createdById], map: "RaidLootEvent_createdById_fkey")
  @@index([guildId])
  @@index([raidId])
}

model RaidSignup {
  id             String         @id @default(cuid())
  raidId         String
  userId         String
  characterId    String
  characterName  String         @db.VarChar(64)
  characterClass CharacterClass
  characterLevel Int?
  isMain         Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  raid           RaidEvent      @relation(fields: [raidId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  character      Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([raidId, characterId])
  @@index([raidId])
  @@index([userId])
}

model GuildLootListEntry {
  id                 String             @id @default(cuid())
  guildId            String
  type               LootListType
  matchType          LootListMatchType
  itemId             Int?
  itemName           String             @db.VarChar(191)
  itemNameNormalized String             @db.VarChar(191)
  createdById        String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  guild              Guild             @relation(fields: [guildId], references: [id], onDelete: Cascade)
  createdBy          User?             @relation("LootListCreator", fields: [createdById], references: [id])

  @@index([guildId, type], map: "GuildLootListEntry_guild_type_idx")
  @@index([guildId, itemNameNormalized], map: "GuildLootListEntry_name_idx")
  @@unique([guildId, type, itemId], map: "GuildLootListEntry_item_id_unique")
  @@unique([guildId, type, matchType, itemNameNormalized], map: "GuildLootListEntry_name_unique")
}

model AttendanceEvent {
  id          String              @id @default(cuid())
  raidEventId String
  createdById String
  note        String?
  snapshot    Json?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  eventType   AttendanceEventType @default(LOG)
  createdBy   User                @relation("AttendanceCreator", fields: [createdById], references: [id])
  raid        RaidEvent           @relation(fields: [raidEventId], references: [id])
  records     AttendanceRecord[]

  @@index([createdById], map: "AttendanceEvent_createdById_fkey")
  @@index([raidEventId], map: "AttendanceEvent_raidEventId_fkey")
}

model AttendanceRecord {
  id                String           @id @default(cuid())
  attendanceEventId String
  characterId       String?
  characterName     String
  level             Int?
  class             CharacterClass?
  groupNumber       Int?
  status            AttendanceStatus @default(PRESENT)
  flags             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  attendanceEvent   AttendanceEvent  @relation(fields: [attendanceEventId], references: [id])
  character         Character?       @relation(fields: [characterId], references: [id])

  @@index([attendanceEventId], map: "AttendanceRecord_attendanceEventId_fkey")
  @@index([characterId], map: "AttendanceRecord_characterId_fkey")
}

enum GuildApplicationStatus {
  PENDING
  APPROVED
  DENIED
  WITHDRAWN
}

enum GuildRole {
  LEADER
  OFFICER
  RAID_LEADER
  MEMBER
}

enum CharacterClass {
  BARD
  BEASTLORD
  BERSERKER
  CLERIC
  DRUID
  ENCHANTER
  MAGICIAN
  MONK
  NECROMANCER
  PALADIN
  RANGER
  ROGUE
  SHADOWKNIGHT
  SHAMAN
  WARRIOR
  WIZARD
  UNKNOWN
}

enum CharacterArchetype {
  PRIEST
  MELEE
  CASTER
  HYBRID
}

enum DiscordWidgetTheme {
  LIGHT
  DARK
}

enum AttendanceEventType {
  LOG
  START
  END
  RESTART
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  BENCHED
}

enum LootListType {
  WHITELIST
  BLACKLIST
}

enum LootListMatchType {
  ITEM_ID
  ITEM_NAME
}

enum RaidRecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
}
